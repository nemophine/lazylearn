'use client';

import { useState, useEffect } from 'react';
import { Play, Pause, Lock, Unlock, Users, RefreshCw, ChevronDown, Flame, Music, DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from 'lucide-react';
import { Card, CardContent } from '../ui/card';
import { Button } from '../ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '../ui/dialog';
import { Progress } from '../ui/progress';
import { Badge } from '../ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../ui/tooltip';

// Import our focus utilities
import { Pet, loadPetData, savePetData, createDefaultPet, updateFocusStats } from '../../focus/utils/localStorage';
import { PET_CONFIGS } from '../../focus/types/pet';

// Import Audio Player
import AudioPlayer from '../AudioPlayer';


export function FocusPage() {
  const [isRunning, setIsRunning] = useState(false);
  const [time, setTime] = useState(25 * 60); // Default 25 minutes in seconds
  const [selectedDuration, setSelectedDuration] = useState(25); // minutes
  const [isSetupMode, setIsSetupMode] = useState(true);
  const [selectedMusic, setSelectedMusic] = useState(0);
  const [petMood, setPetMood] = useState('happy');
  const [isLocked, setIsLocked] = useState(false);
  const [currentPet, setCurrentPet] = useState<Pet | null>(null);
  const [stats, setStats] = useState({ totalFocusTime: 0, sessionsCompleted: 0, currentStreak: 0 });
  const [todaySessions, setTodaySessions] = useState<{completed: boolean, duration: number}[]>([]); // Store sessions with completion status and duration

  // Load pet and stats on mount
  useEffect(() => {
    let pet = loadPetData();
    if (!pet) {
      pet = createDefaultPet();
    }
    setCurrentPet(pet);

    // Load stats
    const statsData = {
      totalFocusTime: 0,
      sessionsCompleted: 0,
      currentStreak: 0
    };
    setStats(statsData);
  }, []);

  // Update pet display based on real pet data
  const getPetDisplay = () => {
    if (!currentPet) {
      return { emoji: 'üê±', name: 'Whiskers', level: 1, mood: 'Happy' };
    }

    const config = PET_CONFIGS[currentPet.type];
    const averageStatus = (currentPet.health + currentPet.hunger + currentPet.energy + currentPet.clean + currentPet.happy) / 5;

    let mood = 'Happy';
    if (averageStatus >= 80) mood = 'Excited';
    else if (averageStatus >= 60) mood = 'Happy';
    else if (averageStatus >= 40) mood = 'Content';
    else mood = 'Sleepy';

    return {
      emoji: config.emoji,
      name: currentPet.name,
      level: currentPet.level,
      mood
    };
  };

  const selectedPet = getPetDisplay();

  const focusTracks = [
    {
      title: 'Ocean Waves üåä',
      duration: '15:00',
      mood: 'Calm & Peaceful',
      file: '/audio/focus/ocean-waves.mp3',
      source: 'Local File',
      status: 'Placeholder - Download real file needed'
    },
    { title: 'Forest Rain', duration: '20:00', mood: 'Relaxing Nature', file: '/audio/focus/forest-rain.mp3', status: 'Coming Soon' },
    { title: 'Piano Meditation', duration: '12:00', mood: 'Deep Focus', file: '/audio/focus/piano-meditation.mp3', status: 'Coming Soon' },
    { title: 'Soft Jazz', duration: '18:00', mood: 'Creative Flow', file: '/audio/focus/soft-jazz.mp3', status: 'Coming Soon' },
    { title: 'White Noise', duration: '30:00', mood: 'Background Focus', file: '/audio/focus/white-noise.mp3', status: 'Coming Soon' },
    { title: 'Test Beep', duration: '0:01', mood: 'Test Audio', file: 'beep', status: 'Working' },
  ];
  const availablePets = [
    { emoji: 'üê±', name: 'Whiskers', level: 5, mood: 'Happy' },
    { emoji: 'üê∂', name: 'Buddy', level: 3, mood: 'Playful' },
    { emoji: 'ü¶ä', name: 'Firefox', level: 4, mood: 'Curious' },
    { emoji: 'üêª', name: 'Teddy', level: 2, mood: 'Sleepy' },
  ];

  const currentCourse = {
    title: 'Advanced JavaScript Patterns',
    progress: 68,
    timeRemaining: '45 mins'
  };
  const [showInviteFriends, setShowInviteFriends] = useState(false);
  const [showRelaxMode, setShowRelaxMode] = useState(false);
  const [unlockClicks, setUnlockClicks] = useState(0);

  const friendsInFocus = [
    { name: 'Emma', pet: 'üê±', time: '00:45:30', selected: false },
    { name: 'Alex', pet: 'üê∂', time: '00:32:15', selected: false },
    { name: 'Sarah', pet: 'ü¶ä', time: '01:12:00', selected: false },
  ];
  const [invitedFriends, setInvitedFriends] = useState<typeof friendsInFocus>([]);

  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isRunning && !isLocked && time > 0) {
      interval = setInterval(() => {
        setTime((prevTime) => {
          if (prevTime <= 1) {
            // Session completed!
            handleSessionComplete();
            return 0;
          }
          return prevTime - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isRunning, isLocked, time]);

  const handleSessionComplete = () => {
    setIsRunning(false);
    setIsLocked(false);

    // Add completed timer cycle to total time
    const timerSession = { completed: false, duration: selectedDuration * 60 };
    setTodaySessions(prev => [...prev, timerSession]);

    // Save completed timer cycle
    const today = new Date().toISOString().split('T')[0];
    localStorage.setItem('today_sessions', JSON.stringify({
      date: today,
      sessions: [...todaySessions, timerSession]
    }));

    console.log('‚è∞ Focus timer completed! Time added to Total Time.');
  };

  // New function to handle video lesson completion
  const handleVideoLessonComplete = () => {
    if (!currentPet) return;

    // Update pet stats (bigger rewards for completing video lessons)
    const duration = selectedDuration * 60;
    const updatedPet = {
      ...currentPet,
      health: Math.min(100, currentPet.health + 10), // Bonus for completing lesson
      hunger: Math.min(100, currentPet.hunger + 25), // Bonus for completing lesson
      energy: Math.min(100, currentPet.energy + 15), // Bonus for completing lesson
      clean: Math.min(100, currentPet.clean + 20), // Bonus for completing lesson
      happy: Math.min(100, currentPet.happy + 15), // Bonus for completing lesson
      exp: currentPet.exp + Math.floor(duration / 60) * 15, // Bonus XP for completing lesson
      lastCare: new Date().toISOString()
    };

    // Check for level up
    const expForNextLevel = updatedPet.level * 200;
    if (updatedPet.exp >= expForNextLevel) {
      updatedPet.level += 1;
      updatedPet.exp = updatedPet.exp - expForNextLevel;
      console.log(`üéâ Pet leveled up to level ${updatedPet.level}!`);
    }

    setCurrentPet(updatedPet);
    savePetData(updatedPet);

    // Add completed video session
    const sessionData = { completed: true, duration: selectedDuration * 60 };
    setTodaySessions(prev => [...prev, sessionData]);

    // Update focus stats
    const newStats = updateFocusStats(selectedDuration * 60);
    setStats(newStats);

    // Save today's sessions to localStorage
    const today = new Date().toISOString().split('T')[0];
    localStorage.setItem('today_sessions', JSON.stringify({
      date: today,
      sessions: [...todaySessions, sessionData]
    }));

    console.log('üéâ Video lesson completed! Session counted and pet stats updated!');
  };

  // Load today's sessions from localStorage
  useEffect(() => {
    const storedSessions = localStorage.getItem('today_sessions');
    const today = new Date().toISOString().split('T')[0];

    if (storedSessions) {
      const parsed = JSON.parse(storedSessions);
      if (parsed.date === today) {
        // Handle different data formats for backward compatibility
        if (parsed.sessions.length > 0) {
          const firstSession = parsed.sessions[0];

          if (typeof firstSession === 'number') {
            // Old format: number array [1500, 1200] - convert to new format
            setTodaySessions(parsed.sessions.map((duration: number) => ({ completed: false, duration })));
          } else if (typeof firstSession === 'boolean') {
            // Previous format: boolean array [true, true] - convert with default duration
            setTodaySessions(parsed.sessions.map(() => ({ completed: false, duration: 25 * 60 })));
          } else if (firstSession && typeof firstSession === 'object') {
            // Current format: {completed: boolean, duration: number} array
            setTodaySessions(parsed.sessions);
          }
        } else {
          setTodaySessions([]);
        }
      } else {
        // New day, clear old sessions
        setTodaySessions([]);
        localStorage.removeItem('today_sessions');
      }
    }
  }, []);

  // Get today's completed session count
  const getTodaySessionCount = () => {
    return todaySessions.filter(s => s.completed).length;
  };

  // Calculate total time only from completed timer cycles (when timer reaches 00:00)
  const getTodayTotalTime = () => {
    return todaySessions
      .filter(session => !session.completed) // Only timer completions, not video completions
      .reduce((total, session) => total + session.duration, 0);
  };

  // Handle timer start/pause
  const handleToggleTimer = () => {
    setIsRunning(!isRunning);
  };

  // Handle back to setup mode
  const handleBackToSetup = () => {
    setIsSetupMode(true);
    setIsRunning(false);
    // Reset timer to default
    setTime(25 * 60); // 25 minutes default
    setSelectedDuration(25); // Reset to default 25 minutes
  };

  useEffect(() => {
    if (time > 1800) setPetMood('excited');
    else if (time > 600) setPetMood('happy');
    else if (time > 0) setPetMood('content');
    else setPetMood('sleepy');
  }, [time]);

  const formatTime = (seconds: number) => {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getPetAnimation = () => {
    switch (petMood) {
      case 'excited': return 'animate-bounce';
      case 'happy': return 'animate-pulse';
      case 'content': return '';
      default: return '';
    }
  };

  const handleUnlock = () => {
    if (isLocked) {
      setUnlockClicks(prev => prev + 1);
      if (unlockClicks >= 1) {
        setIsLocked(false);
        setUnlockClicks(0);
      }
    } else {
      setIsLocked(true);
      setUnlockClicks(0);
    }
  };

  const totalFocusMinutes = Math.floor(time / 60) + (7 * 150); // 7 days streak * 150 mins avg
  const streakDays = 7;

  const sharedXP = invitedFriends.length > 0 ? 750 : 0;
  const sharedXPMax = 1000;

  return (
    <div className="p-8 max-w-7xl mx-auto">
      {/* Top Section with Interactive Icons */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="mb-1">Focus Mode üéØ</h2>
          <p className="text-sm text-muted-foreground">Stay focused with your virtual pet and relaxing ambience</p>
        </div>
        
        <div className="flex items-center gap-3">
          {/* Streak Icon with Hover */}
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <button className="flex items-center gap-2 px-4 py-2.5 bg-gradient-to-r from-[var(--teal-400)] to-[var(--teal-300)] rounded-2xl text-white hover:shadow-lg hover:scale-105 transition-all duration-200">
                  <Flame className="w-5 h-5" />
                  <span>{streakDays} days</span>
                </button>
              </TooltipTrigger>
              <TooltipContent side="bottom" className="bg-white border-[var(--teal-200)] shadow-lg">
                <div className="text-center p-2">
                  <p className="mb-1">üî• Day {streakDays} Streak!</p>
                  <p className="text-sm text-muted-foreground">{totalFocusMinutes} mins total</p>
                  <p className="text-xs text-muted-foreground mt-1">Keep it up!</p>
                </div>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>

          {/* Pet Icon with Hover & Quick Actions */}
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="flex items-center gap-2 px-4 py-2.5 bg-gradient-to-r from-[var(--teal-300)] to-[var(--teal-200)] rounded-2xl">
                  <span className="text-2xl">{selectedPet.emoji}</span>
                  <span className="text-foreground">{selectedPet.name}</span>
                </div>
              </TooltipTrigger>
              <TooltipContent side="bottom" className="bg-white border-[var(--teal-200)] shadow-lg">
                <div className="text-center p-2">
                  <p className="mb-1">{selectedPet.name}</p>
                  <p className="text-sm text-muted-foreground">Level {selectedPet.level}</p>
                  <p className="text-sm text-muted-foreground">Mood: {selectedPet.mood}</p>
                  <p className="text-xs text-muted-foreground mt-1">Click dropdown for actions</p>
                </div>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="flex items-center justify-center w-10 h-10 bg-gradient-to-r from-[var(--teal-300)] to-[var(--teal-200)] rounded-xl hover:shadow-lg hover:scale-105 transition-all duration-200">
                <ChevronDown className="w-4 h-4 text-foreground" />
              </button>
            </DropdownMenuTrigger>
            
            <DropdownMenuContent align="end" className="w-48 bg-white border-[var(--teal-200)] rounded-2xl shadow-lg">
              <DropdownMenuItem className="rounded-xl cursor-pointer">
                <span className="mr-2">üçñ</span> Feed Pet
              </DropdownMenuItem>
              <DropdownMenuItem className="rounded-xl cursor-pointer">
                <span className="mr-2">üéæ</span> Play
              </DropdownMenuItem>
              <DropdownMenuItem className="rounded-xl cursor-pointer">
                <span className="mr-2">üîÑ</span> Change Pet
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Course Progress Mini Card */}
      <Card className="mb-6 bg-gradient-to-r from-[var(--teal-50)] to-white border-[var(--teal-200)]">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <p className="text-sm text-muted-foreground mb-1">Last studied</p>
              <p className="mb-2">{currentCourse.title}</p>
              <div className="flex items-center gap-3">
                <Progress value={currentCourse.progress} className="h-2 flex-1" />
                <span className="text-sm text-muted-foreground whitespace-nowrap">{currentCourse.progress}% ‚Ä¢ {currentCourse.timeRemaining} left</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-2 gap-6">
        {/* Main Focus Area */}
        <div className="space-y-6">
          {/* Focus Timer with Lock Visual Feedback */}
          <Card className={`bg-gradient-to-br from-[var(--teal-50)] to-white border-[var(--teal-200)] shadow-lg overflow-hidden transition-all duration-300 ${isLocked ? 'ring-4 ring-[var(--teal-400)]' : ''}`}>
            <CardContent className="p-8 relative">
              {isLocked && (
                <div className="absolute inset-0 bg-[var(--teal-400)]/5 backdrop-blur-[1px] pointer-events-none z-10" />
              )}
              
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                  <span className="text-sm text-muted-foreground">
                    {isLocked ? 'üîí Focus Mode Active - Locked' : isRunning ? 'Focus Active' : (isSetupMode ? '‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà' : 'Ready to Focus')}
                  </span>
                </div>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="outline"
                        size="sm"
                        className="rounded-full"
                        onClick={handleUnlock}
                      >
                        {isLocked ? <Lock className="w-4 h-4" /> : <Unlock className="w-4 h-4" />}
                        <span className="ml-2">{isLocked ? 'Locked' : 'Unlocked'}</span>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="text-xs">{isLocked ? 'Double-tap to unlock' : 'Click to lock focus mode'}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>

              {/* Timer Setup Mode */}
              {isSetupMode ? (
                <div className="text-center">
                  <h3 className="text-xl font-semibold mb-6">Setup Focus Session</h3>

                  <div className="mb-8">
                    <label className="block text-sm font-medium text-foreground mb-3">
                      Focus Duration (minutes)
                    </label>
                    <div className="flex justify-center gap-2 mb-4">
                      {[15, 25, 45, 60].map((minutes) => (
                        <button
                          key={minutes}
                          onClick={() => setSelectedDuration(minutes)}
                          className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                            selectedDuration === minutes
                              ? 'bg-[var(--teal-400)] text-white'
                              : 'bg-[var(--teal-100)] text-foreground hover:bg-[var(--teal-200)]'
                          }`}
                        >
                          {minutes}
                        </button>
                      ))}
                    </div>
                    <input
                      type="range"
                      min="5"
                      max="180"
                      value={selectedDuration}
                      onChange={(e) => setSelectedDuration(Number(e.target.value))}
                      className="w-full max-w-xs mx-auto"
                    />
                    <p className="text-sm text-muted-foreground mt-2">
                      Selected: {selectedDuration} minutes
                    </p>
                  </div>

                  <Button
                    onClick={() => {
                      setTime(selectedDuration * 60);
                      setIsSetupMode(false);
                    }}
                    className="w-full max-w-xs rounded-2xl bg-[var(--teal-400)] hover:bg-[var(--teal-500)] py-6"
                  >
                    Start Focus Session
                  </Button>
                </div>
              ) : (
                /* Timer Circle */
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="relative w-80 h-80 mx-auto mb-8 cursor-help">
                        <svg className="w-full h-full transform -rotate-90">
                          <circle
                            cx="50%"
                            cy="50%"
                            r="45%"
                            stroke="var(--teal-200)"
                            strokeWidth="12"
                            fill="none"
                          />
                          <circle
                            cx="50%"
                            cy="50%"
                            r="45%"
                            stroke="var(--teal-400)"
                            strokeWidth="12"
                            fill="none"
                            strokeDasharray={`${((selectedDuration * 60 - time) / (selectedDuration * 60)) * (2 * Math.PI * 45)} ${2 * Math.PI * 45}`}
                            className="transition-all duration-1000"
                            strokeLinecap="round"
                          />
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <div className="text-center">
                            <p className="text-5xl mb-2">{formatTime(time)}</p>
                            <p className="text-sm text-muted-foreground">
                              {time === 0 ? "Focus Time Complete!" :
                               isSetupMode ? "Set your focus time" :
                               `${getTodaySessionCount()} video${getTodaySessionCount() === 1 ? '' : 's'} completed today`}
                            </p>
                            {!isSetupMode && getTodaySessionCount() > 0 && (
                              <div className="text-xs text-[var(--teal-600)] mt-1">
                                Sessions completed: {getTodaySessionCount()}
                              </div>
                            )}
                            {time === 0 && !isSetupMode && (
                              <div className="mt-4">
                                <p className="text-xs text-muted-foreground mb-2">
                                  üìπ Complete your video lesson to count this session
                                </p>
                                <Button
                                  onClick={handleVideoLessonComplete}
                                  className="w-full max-w-xs rounded-xl bg-[var(--teal-400)] hover:bg-[var(--teal-500)] text-white py-2 px-4 text-sm"
                                >
                                  ‚úÖ I Completed the Video Lesson
                                </Button>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="text-xs">Your focus timer</p>
                      <p className="text-xs text-muted-foreground">Stay focused to grow your pet</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}

              {/* Timer Controls */}
              {!isSetupMode && (
                <div className="flex justify-center items-center gap-4 mb-4">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <div>
                          <Button
                            size="lg"
                            onClick={() => !isLocked && handleToggleTimer()}
                            className="rounded-full w-20 h-20 bg-[var(--teal-400)] hover:bg-[var(--teal-500)] disabled:opacity-50"
                            disabled={isLocked || time === 0}
                          >
                            {isRunning ? <Pause className="w-8 h-8" /> : <Play className="w-8 h-8 ml-1" />}
                          </Button>
                        </div>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="text-xs">{isRunning ? 'Pause focus' : 'Start focus session'}</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  {/* Reset Time Button */}
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <div>
                          <Button
                            size="lg"
                            variant="outline"
                            onClick={() => {
                              setTime(0);
                              setIsRunning(false);
                              setIsSetupMode(true);
                            }}
                            className="rounded-full w-20 h-20 border-[var(--teal-400)] text-[var(--teal-400)] hover:bg-[var(--teal-50)]"
                            disabled={isLocked}
                          >
                            <RefreshCw className="w-8 h-8" />
                          </Button>
                        </div>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="text-xs">Reset & go back</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  {/* Add Friend Button */}
                  <Dialog open={showInviteFriends} onOpenChange={setShowInviteFriends}>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div>
                            <DialogTrigger asChild>
                              <Button
                                size="lg"
                                variant="outline"
                                className="rounded-full w-20 h-20 border-[var(--teal-400)] text-[var(--teal-400)] hover:bg-[var(--teal-50)]"
                                disabled={isLocked}
                              >
                                <Users className="w-8 h-8" />
                              </Button>
                            </DialogTrigger>
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="text-xs">Invite friends to focus together</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <DialogContent className="sm:max-w-lg">
                      <DialogHeader>
                        <DialogTitle>Invite Friends to Focus Together</DialogTitle>
                        <DialogDescription>Select friends to join your focus session and grow pets together</DialogDescription>
                      </DialogHeader>
                      <div className="space-y-3 mt-4">
                        {friendsInFocus.map((friend, index) => (
                          <div
                            key={index}
                            className="flex items-center justify-between p-4 bg-[var(--teal-50)] rounded-2xl hover:bg-[var(--teal-100)] transition-colors cursor-pointer"
                            onClick={() => {
                              const isInvited = invitedFriends.some(f => f.name === friend.name);
                              if (isInvited) {
                                setInvitedFriends(invitedFriends.filter(f => f.name !== friend.name));
                              } else {
                                setInvitedFriends([...invitedFriends, friend]);
                              }
                            }}
                          >
                            <div className="flex items-center gap-3">
                              <Avatar className="w-12 h-12 border-2 border-[var(--teal-400)]">
                                <AvatarImage src={`https://api.dicebear.com/7.x/avataaars/svg?seed=${friend.name}`} />
                                <AvatarFallback>{friend.name[0]}</AvatarFallback>
                              </Avatar>
                              <div>
                                <p className="mb-0.5">{friend.name}</p>
                                <p className="text-sm text-muted-foreground">Focus time: {friend.time}</p>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="text-2xl">{friend.pet}</span>
                              <Badge
                                variant="secondary"
                                className={invitedFriends.some(f => f.name === friend.name) ? 'bg-[var(--teal-400)] text-white' : 'bg-[var(--teal-100)]'}
                              >
                                {invitedFriends.some(f => f.name === friend.name) ? 'Invited' : 'Invite'}
                              </Badge>
                            </div>
                          </div>
                        ))}
                      </div>
                      <Button
                        className="w-full mt-4 rounded-2xl bg-[var(--teal-400)] hover:bg-[var(--teal-500)]"
                        onClick={() => setShowInviteFriends(false)}
                      >
                        Start Group Focus ({invitedFriends.length} friends)
                      </Button>
                    </DialogContent>
                  </Dialog>

                                  </div>
              )}

              {/* Friend Avatars Below Timer */}
              {invitedFriends.length > 0 && (
                <div className="flex justify-center items-center gap-3">
                  <p className="text-sm text-muted-foreground">Focusing with:</p>
                  <div className="flex -space-x-2">
                    {invitedFriends.map((friend, index) => (
                      <div key={index} className="relative group">
                        <Avatar className="w-10 h-10 border-2 border-white ring-2 ring-[var(--teal-400)] hover:scale-110 transition-transform">
                          <AvatarImage src={`https://api.dicebear.com/7.x/avataaars/svg?seed=${friend.name}`} />
                          <AvatarFallback>{friend.name[0]}</AvatarFallback>
                        </Avatar>
                        <span className="absolute -bottom-1 -right-1 text-sm">{friend.pet}</span>
                        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-foreground text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none">
                          {friend.name}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {isLocked && unlockClicks === 1 && (
                <div className="mt-6 p-4 bg-[var(--teal-100)] rounded-2xl text-center">
                  <p className="text-sm text-foreground">üîí Tap "Unlock" once more to exit focus mode</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Shared Pet Growth Section */}
          {invitedFriends.length > 0 && (
            <Card className="bg-gradient-to-br from-[var(--teal-100)] to-[var(--teal-50)] border-[var(--teal-300)]">
              <CardContent className="p-6">
                <h3 className="mb-4">üå± Group Pet Garden</h3>
                <div className="flex justify-center gap-3 mb-4">
                  <span className="text-4xl">{selectedPet.emoji}</span>
                  {invitedFriends.map((friend, index) => (
                    <span key={index} className="text-4xl">{friend.pet}</span>
                  ))}
                </div>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="cursor-help">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="text-sm">Shared XP Progress</h4>
                          <span className="text-sm text-muted-foreground">{sharedXP} / {sharedXPMax} XP</span>
                        </div>
                        <Progress value={(sharedXP / sharedXPMax) * 100} className="h-3 mb-2" />
                        <p className="text-xs text-center text-muted-foreground">
                          Focusing together helps pets grow faster! üåü
                        </p>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="text-xs">Group sessions earn 2x XP</p>
                      <p className="text-xs text-muted-foreground">Keep focusing together!</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </CardContent>
            </Card>
          )}

          {/* Relax Mode Button */}
          <Dialog open={showRelaxMode} onOpenChange={setShowRelaxMode}>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <div>
                    <DialogTrigger asChild>
                      <Button
                        variant="outline"
                        className="w-full rounded-2xl border-[var(--teal-200)] hover:bg-[var(--teal-50)] py-6"
                      >
                        <Music className="w-5 h-5 mr-2" />
                        <span>Relax Mode - Ambient Playlist</span>
                      </Button>
                    </DialogTrigger>
                  </div>
                </TooltipTrigger>
                <TooltipContent>
                  <p className="text-xs">Choose ambient music for focus</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
            <DialogContent className="sm:max-w-2xl">
              <DialogHeader>
                <DialogTitle>üéµ Relax Mode - Ambient Playlist</DialogTitle>
                <DialogDescription>Choose background music to enhance your focus</DialogDescription>
              </DialogHeader>
              <div className="grid grid-cols-2 gap-3 mt-4">
                {focusTracks.map((track, index) => (
                  <Card
                    key={index}
                    className={`cursor-pointer transition-all border ${
                      selectedMusic === index
                        ? 'border-[var(--teal-400)] shadow-md bg-[var(--teal-50)]'
                        : 'border-[var(--teal-200)] hover:border-[var(--teal-300)]'
                    }`}
                    onClick={() => setSelectedMusic(index)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center gap-3">
                        <div
                          className={`w-12 h-12 rounded-xl flex items-center justify-center ${
                            selectedMusic === index
                              ? 'bg-[var(--teal-400)]'
                              : 'bg-[var(--teal-100)]'
                          }`}
                        >
                          <Music
                            className={`w-5 h-5 ${
                              selectedMusic === index ? 'text-white' : 'text-[var(--teal-500)]'
                            }`}
                          />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm mb-0.5 truncate">{track.title}</p>
                          <p className="text-xs text-muted-foreground">{track.mood}</p>
                          <p className="text-xs text-muted-foreground">{track.duration}</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </DialogContent>
          </Dialog>

          {/* Audio Player */}
          <div className="space-y-3">
            <AudioPlayer
              track={focusTracks[selectedMusic]}
              isSelected={true}
              onSelect={() => {}}
            />
          </div>
        </div>

        {/* Right Sidebar - Simplified */}
        <div className="space-y-6">
          {/* Virtual Pet Display */}
          <Card className="overflow-hidden border-[var(--teal-200)]">
            <CardContent className="p-6 bg-gradient-to-br from-[var(--teal-300)] to-[var(--teal-200)] text-center">
              <h4 className="text-foreground mb-3">Your Focus Buddy</h4>
              <div className={`text-8xl mb-4 ${getPetAnimation()}`}>{selectedPet.emoji}</div>
              <p className="text-foreground mb-2">{selectedPet.name}</p>
              <Badge variant="secondary" className="bg-white/60 text-foreground border-0 mb-4">
                Level {selectedPet.level} ‚Ä¢ {selectedPet.mood}
              </Badge>

              {/* Real Pet Status Bars */}
              {currentPet && (
                <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-4 space-y-3">
                  <div className="text-sm font-medium text-foreground mb-2">Pet Status</div>

                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-xs">‚ù§Ô∏è Health</span>
                      <span className="text-xs">{currentPet.health}%</span>
                    </div>
                    <Progress value={currentPet.health} className="h-1" />
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-xs">üçñ Hunger</span>
                      <span className="text-xs">{currentPet.hunger}%</span>
                    </div>
                    <Progress value={currentPet.hunger} className="h-1" />
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-xs">‚ö° Energy</span>
                      <span className="text-xs">{currentPet.energy}%</span>
                    </div>
                    <Progress value={currentPet.energy} className="h-1" />
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-xs">üßº Clean</span>
                      <span className="text-xs">{currentPet.clean}%</span>
                    </div>
                    <Progress value={currentPet.clean} className="h-1" />
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-xs">üòä Happy</span>
                      <span className="text-xs">{currentPet.happy}%</span>
                    </div>
                    <Progress value={currentPet.happy} className="h-1" />
                  </div>

                  {/* EXP Progress */}
                  <div className="mt-4 pt-3 border-t border-white/30">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-xs font-medium">Level Progress</span>
                      <span className="text-xs">{currentPet.exp}/{currentPet.level * 200} XP</span>
                    </div>
                    <Progress value={(currentPet.exp / (currentPet.level * 200)) * 100} className="h-2" />
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Stats */}
          <div className="grid grid-cols-2 gap-3">
            <Card className="bg-gradient-to-br from-[var(--teal-400)] to-[var(--teal-300)] border-0">
              <CardContent className="p-4 text-center">
                <p className="text-white/90 text-xs mb-1">total time</p>
                <h3 className="text-white">{formatTime(getTodayTotalTime())}</h3>
                <p className="text-white/70 text-xs mt-1">
                  Completed Cycles
                </p>
              </CardContent>
            </Card>
            <Card className="bg-gradient-to-br from-[var(--teal-300)] to-[var(--teal-200)] border-0">
              <CardContent className="p-4 text-center">
                <p className="text-foreground/80 text-xs mb-1">Sessions</p>
                <h3 className="text-foreground">{getTodaySessionCount()}</h3>
                <p className="text-foreground/60 text-xs mt-1">
                  {getTodaySessionCount() === 0 ? 'No videos completed' : 'Videos completed'}
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Focus Tips */}
          <Card className="bg-[var(--teal-50)] border-[var(--teal-200)]">
            <CardContent className="p-5">
              <h4 className="mb-3">üí° Focus Tips</h4>
              <ul className="space-y-2 text-xs text-muted-foreground">
                <li>‚Ä¢ Take breaks every 25 minutes</li>
                <li>‚Ä¢ Stay hydrated during sessions</li>
                <li>‚Ä¢ Keep workspace organized</li>
                <li>‚Ä¢ Avoid multitasking</li>
              </ul>
            </CardContent>
          </Card>
          </div>
        </div>
        </div>
      </div>
    </div>
  );
}
